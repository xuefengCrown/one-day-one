# 10.1. itertools — Functions creating iterators for efficient looping
https://docs.python.org/3/library/itertools.html

For instance, SML provides a tabulation tool: tabulate(f) which produces a 
sequence f(0), f(1), .... The same effect can be achieved in Python by 
combining map() and count() to form map(f, count()).

These tools and their built-in counterparts also work well with the high-speed 
functions in the operator module. For example, the multiplication operator can 
be mapped across two vectors to form an efficient dot-product: 
sum(map(operator.mul, vector1, vector2)).

https://en.wikipedia.org/wiki/Dot_product
## dot-product 点积
import operator as ope
vector1 = [1, 3, 5, 8]
vector2 = [2, 4, 5, 9]
dot_product = sum(map(ope.mul, vector1, vector2))

## cartesian product 笛卡尔积
A deck of cards
A two-dimensional coordinate system

### 使用itertools.product() 产生 a deck
import itertools
cards = it.product('hdsc', '23456789TJQKA')
// [r+s for r in '23456789TJQKA' for s in 'hdsc']

## 排列与组合（permutations && combinations）
https://docs.python.org/3/library/itertools.html#itertools.permutations
https://docs.python.org/3/library/itertools.html#itertools.combinations

### an apply of combinations
def best_hand(hand):
    "From a 7-card hand, return the best 5 card hand."
    combine = itertools.combinations(hand, 5)
    return max(combine, key=hand_rank)











