# c1 Building Abstractions with Functions

1.1 Getting Started

1.1.1 Programming in Python
1.1.2 Installing Python 3
1.1.3 Interactive Sessions
1.1.4 First Example
1.1.5 Errors


1.1 Getting Started

1.1.1 Programming in Python
1.1.2 Installing Python 3
1.1.3 Interactive Sessions
1.1.4 First Example
1.1.5 Errors
Python is waiting for your command. You are encouraged to experiment with the language, 
even though you may not yet know its full vocabulary and structure. However, be prepared 
for errors. While computers are tremendously fast and flexible, they are also extremely rigid. 
The nature of computers is described in Stanford's introductory course as

The fundamental equation of computers is:
computer = powerful + stupid
Computers are very powerful, looking at volumes of data very quickly. Computers can perform 
billions of operations per second, where each operation is pretty simple.

Computers are also shockingly stupid and fragile. The operations that they can do are extremely 
rigid, simple, and mechanical. The computer lacks anything like real insight ... it's nothing 
like the HAL 9000 from the movies. If nothing else, you should not be intimidated by the 
computer as if it's some sort of brain. It's very mechanical underneath it all.

Programming is about a person using their real insight to build something useful, constructed out 
of these teeny, simple little operations that the computer can do.

—Francisco Cai and Nick Parlante, Stanford CS101
The rigidity of computers will immediately become apparent（明显） as you experiment with the Python interpreter: 
even the smallest spelling and formatting changes will cause unexpected output and errors.

Learning to interpret errors and diagnose（诊断） the cause of unexpected errors is called debugging. 
Some guiding principles of debugging are:

1.Test incrementally: Every well-written program is composed of small, modular components that can be tested individually. 
Try out everything you write as soon as possible to identify problems early and gain confidence in your components.
2.Isolate errors: An error in the output of a statement can typically be attributed to a particular modular component.
When trying to diagnose a problem, trace the error to the smallest fragment（片段） of code you can before trying to correct it.
3.Check your assumptions: Interpreters do carry out your instructions to the letter — no more and no less. 
Their output is unexpected when the behavior of some code does not match what the programmer believes (or assumes) 
that behavior to be. Know your assumptions, then focus your debugging effort on verifying that your assumptions 
actually hold.
4.Consult others: You are not alone! If you don't understand an error message, ask a friend, instructor, or search engine. 
If you have isolated an error, but can't figure out how to correct it, ask someone else to take a look. A lot of valuable
programming knowledge is shared in the process of group problem solving.
Incremental testing, modular design, precise assumptions, and teamwork are themes that persist throughout this text. 
Hopefully, they will also persist throughout your computer science career.



