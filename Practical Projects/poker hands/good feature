# python的一些语言特型带来的优势

1. 非零非空 即为真值
kind(4, ranks)

2. 列表 相加
## 100 hands
[sf] + 99*[fk]

3. 元组的构造的方便
def hand_rank(hand):
    ranks = card_ranks(hand)
    if straight(ranks) and flush(hand):            # straight flush
        return (8, max(ranks))
    elif kind(4, ranks):                           # 4 of a kind
        return (7, kind(4, ranks), kind(1, ranks))
    elif kind(3, ranks) and kind(2, ranks):        # full house
        return (6, kind(3, ranks), kind(2, ranks))
    elif flush(hand):                              # flush
        return (5, ranks)
    elif straight(ranks):                          # straight
        return (4, max(ranks))
    elif kind(3, ranks):                           # 3 of a kind
        return (3, kind(3, ranks), ranks)
    elif two_pair(ranks):                          # 2 pair
        return (2, ranks)
    elif kind(2, ranks):                           # kind
        return (1, kind(2, ranks), ranks)
    else:                                          # high card
        return (0, ranks)
        
4. max 函数 的key
def poker(hands):
    "Return the best hand: poker([hand,...]) => hand"
    return max(hands, key=hand_rank)

5. 列表 元组的比较（还有str）
## 这在比较两手牌时相当有用！
(8, 10) > (8, 9)
(8, 10) > (7, 13, 10)

6. 列表解析式 快速析取 所需元素的集合
def card_ranks(hand):
    "Return a list of the ranks, stored with higher first"
    rnks = [r for r, s in hand]
    ranks.sort(reverse = True) # 通过关键字指定行为，很便捷
    return ranks
    
    
    
7. slices
def deal(numhands, n=5, deck=mydeck):
    # generate n people
    dealer, circle = [], 0
    [dealer.append([]) for i in range(numhands)]
    # shuffle cards
    random.shuffle(deck)
    # deal cards
    for card in deck:
        dealer[circle%numhands].append(card)
        circle += 1
        if circle == n*numhands:
            break

    return dealer

# 既然牌已经shuffle了，连续取也一样的！
def deal_peter(numhands, n=5, deck=[r+s for r in '23456789TJQKA' for s in 'SHDC']):
    # shuffle cards
    random.shuffle(deck)
    return [deck[n*i:n*(i+1) for i in range(numhands)]]
    
    
