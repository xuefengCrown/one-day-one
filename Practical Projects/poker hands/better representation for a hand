[9, 7, 10, 9, 9]
counts, ranks
(3, 1, 1), (9, 10, 7)

counts, ranks = group(hand)

# unzip
>>> counts, ranks = group[0], group[1]
>>> counts
(3, 1, 1)
>>> ranks
(9, 10, 7)

def hand_rank_better(hand):
    "Return a value indicating how high the hand ranks."
    # counts is the count of each rank; ranks lists corresponding ranks
    # E.g. '7 T 7 9 7' => counts = (3, 1, 1); ranks = (7, 9, 10)
    groups = group(['--23456789TJQKA'.index(r) for r,s in hand])
    counts, ranks = groups[0], groups[1]
    if ranks == (14, 5, 4, 3, 2):
        ranks = (5, 4, 3, 2, 1)
    straight = len(ranks) == 5 and max(ranks)-min(ranks)==4
    flush = len(set([s for r,s in hand])) == 1
    return (9 if (5,) == counts else
            8 if straight and flush else
            7 if (4, 1) == counts else
            6 if (3, 2) == counts else
            5 if flush else
            4 if straight else
            3 if (3, 1, 1) == counts else
            2 if (2, 2, 1) == counts else
            1 if (2, 1, 1, 1) == counts else
            0), ranks

def hand_rank_amaze(hand):
    "Return a value indicating how high the hand ranks."
    # counts is the count of each rank; ranks lists corresponding ranks
    # E.g. '7 T 7 9 7' => counts = (3, 1, 1); ranks = (7, 9, 10)

    groups = group(['--23456789TJQKA'.index(r) for r,s in hand])
    counts, ranks = groups[0], groups[1]
    if ranks == (14, 5, 4, 3, 2):
        ranks = (5, 4, 3, 2, 1)
    straight = len(ranks) == 5 and max(ranks)-min(ranks)==4
    flush = len(set([s for r,s in hand])) == 1
    count_ranks = {(5,):10, (4,1):7, (3,2):6, (3,1,1):3, (2,2,1):2,
               (2,1,1,1):1, (1,1,1,1,1):0} 
    # 这是一种模式匹配吗？！
    return max(count_rankings[counts], 4*straight + 5*flush), ranks # *straight :if True return 1 else 0 
            
def group(hand):
    "Return a list of [(count, x)...], highest count first, then highest x first"
    groups = [(items.count(x), x) for x in set(items)]
    groups.sort(reverse=True)
    return tuple([g[0] for g in groups]), tuple([g[1] for g in groups])

