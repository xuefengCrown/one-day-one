
In this section, we see that classes and objects can themselves be represented 
using just functions and dictionaries. The purpose of implementing an object 
system in this way is to illustrate that using the object metaphor does not 
require a special programming language. Programs can be object-oriented, 
even in programming languages that do not have a built-in object system.

To implement an object system in full, we send messages between instances, classes, 
and base classes, all of which are dictionaries that contain attributes.

## instance
As we have seen previously in this chapter, dictionaries themselves are abstract 
data types. We implemented dictionaries with lists, we implemented lists with pairs, 
and we implemented pairs with functions. As we implement an object system in terms of 
dictionaries, keep in mind that we could just as well be implementing objects using functions alone.

什么是一个实例（instance）??????
;;;;;;;;;;;;;;;;;;;
# The instance is a dispatch dictionary that responds to the messages get and set.
def make_instance(cls):
        """Return a new object instance, which is a dispatch dictionary."""
        def get_value(name):
            if name in attributes:
                return attributes[name]
            else:
                value = cls['get'](name)
                return bind_method(value, instance)
        def set_value(name, value):
            attributes[name] = value
        attributes = {}
        instance = {'get': get_value, 'set': set_value}
        return instance

将方法绑定到实例，是什么意思???
;;;;;;;;;;;;;;;;;;;;
def bind_method(value, instance):
        """Return a bound method if value is callable, or value otherwise."""
        if callable(value):
            def method(*args):
                return value(instance, *args)
            return method
        else:
            return value
            
一个类指的是什么???            
;;;;;;;;;;;;;;;;;;;;;
def make_class(attributes, base_class=None):
        """Return a new class, which is a dispatch dictionary."""
        def get_value(name):
            if name in attributes:
                return attributes[name]
            elif base_class is not None:
                return base_class['get'](name)
        def set_value(name, value):
            attributes[name] = value
        def new(*args):
            return init_instance(cls, *args)
        cls = {'get': get_value, 'set': set_value, 'new': new}
        return cls
;;;;;;;;;;;;;;;;;;;;;;
def init_instance(cls, *args):
        """Return a new object with type cls, initialized with args."""
        instance = make_instance(cls)
        init = cls['get']('__init__')
        if init:
            init(instance, *args)
        return instance


Account = make_account_class()
print("Account: ", Account)

kirk_account = Account['new']('Kirk')

??????????????????????????????????????





