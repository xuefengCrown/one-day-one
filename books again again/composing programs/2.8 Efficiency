
Efficiency refers to the computational resources used by a representation or process, 
such as how much time and memory are required to compute the result of a function or 
represent an object. These amounts can vary widely depending on the details of an implementation.

使用dict替代多分支if/elif，在implement objects and classes中应用频繁。

跟踪每次调用/很有用的技术!!!!!!
统计调用次数
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
def fib(n):
        if n == 0:
            return 0
        if n == 1:
            return 1
        return fib(n-2) + fib(n-1)
"""
The higher-order count function returns an equivalent function to its argument that 
also maintains a call_count attribute. In this way, we can inspect just how many times 
fib is called.
"""
def count(f):
        def counted(*args):
            counted.call_count += 1
            return f(*args)
        counted.call_count = 0
        return counted

fib = count(fib)
print(fib(29))
print("call num: ", fib.call_count)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Tree-recursive computational processes can often be made more efficient through memoization, 
a powerful technique for increasing the efficiency of recursive functions that repeat computation. 
A memoized function will store the return value for any arguments it has previously received. 
A second call to fib(25) would not re-compute the return value recursively, but instead return 
the existing one that has already been constructed.
Memoization can be expressed naturally as a higher-order function, which can also be used as 
a decorator. The definition below creates a cache of previously computed results, indexed by 
the arguments from which they were computed. The use of a dictionary requires that the argument 
to the memoized function be immutable.

缓存结果，减少重复计算
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
def memo(f):
        cache = {}
        def memoized(n):
            if n not in cache:
                cache[n] = f(n)
            return cache[n]
        return memoized
def fib_memo(n):
        if n == 0:
            return 0
        if n == 1:
            return 1
        return fm(n-2) + fm(n-1)
fm = memo(fib_memo)
print(fib_memo(49))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

