Chapter 20. Version Control
“I object to doing things that computers can do.” — Olin Shivers

Writing software is a team sport. When you are working on a project with more than one
person, you will both be making changes to the codebase —the folders and files that make up
your software—and you need to keep those changes in sync. You could both periodically
email each other with your changes, and combine the two different versions yourself, but that
would quickly become tedious. Also what would happen if you both made changes to the same
part of the project? Whose changes should be used? These are the kinds of problems a
version control system solves. A version control system is software designed to let you
easily collaborate on projects with other programmers.
There are many different version control systems. Git and SVN are both popular
choices. Version control systems are programs, usually used in conjunction with a service that
stores your software on the cloud, like GitHub . In this chapter we are going to use Git, a
version control system, to put software on Github, a website that stores your code on the
cloud.


repository
A programmer working on the project can update the central repository with the changes they’ve 
made in their local repository or they can update their local repository with the newest changes other
programmers have made to the central repository.
image of repositories communicating
This is done from the command line using the program Git.

You can create a new repository using the Git program from the command line or on
GitHub’s website. Once you create a repository, you can use the Git program to manage it and
communicate with a central repository.


You can use this link to download your repository to your computer using the command git clone
[repository_url] . The repository will download in whatever director you issue the command
from. Copy the link, or press the copy link to clipboard button and use it with the git clone
command:
$ git clone
>>
Use ls to verify the repository downloaded:
$ ls
>> my_project

Pushing and Pulling
There are two main things you will be doing with Git. The first is updating the central
repository with changes from your local repository. This is called pushing because you are
pushing new data to your central repository.
The second thing you will be doing is called pulling . Pulling data means updating your
local repository with all of the new changes from the central repository.
The command git remote -v shows you what central repository your local repository is
pushing and pulling from. The -v flag stands for verbose, which means the command will
usually print out extra information . Use this command inside to see the central repository
your local repository is pushing and pulling from:
$ git remote -v
>> origin https://github.com/[username]/my_git_project.git
(fetch)
>> origin https://github.com/[username]/my_git_project.git (push)
The first line shows the central repository your project will pull data from and the second line
shows the central repository your project will push data to. Generally, you will push and pull
from the same central repository.


You should see the file hangman.py in a green font. You have to stage each file you want to
push to your repository with the command git add [file] . If you stage a file and change your
mind, you can unstage it without making changes to your central repository. You can unstage
a file with the syntax git reset [file_path] . Unstage hangman.py with the command git reset
hangman.py . Use git status to see the result, and add it again with git add hangman.py :
$ git reset hangman.py
$ git status
>>
$ git add hangman.py
>>

Once we’ve staged our files, and everything looks the way we want, we are ready to move to
the next step—committing our files to our central repository. When you commit files, you
want to use the -m flag so you can pass along a message. The message will be saved along
with your commit in your repository to help you remember what changes you made in that
commit.
$ git commit -m "my first commit"
>> 1 file changed, 1 insertion(+)
create mode 100644 hello_world.py

The final step is to actually push your changes to GitHub. This is done with the command git
push origin master:
$ git push origin master
>> Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 309 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/[your_username]/my_project.git
0eb3a47..48acc38 master -> master
Once you enter your GitHub username and password from the command line, your changes
will be pushed to GitHub. If you look at your repository on GitHub’s website, you will see
hangman.py is now in your project.


Pulling Example
In this section, we learn how to update your repository with changes from the central
repository. First, we have to make a change in our central repository. Use the command git
pull origin master to update your local repository with the change we made:
$ git pull origin master
>>From https://github.com/calthoff/my_project
>> * branch master -> FETCH_HEAD
Git applied the changes from our central repository to our local repository, and they are now
in sync. You can view the README.md file on your computer to see the change.











