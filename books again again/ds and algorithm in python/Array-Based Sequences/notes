Therefore, we establish an accurate mental model for each of these classes.

数组的威力源于这样一个事实——计算机的内存就是线性组织的，所以array access 才这么迅速。（O(1)）
# 5.2 Low-Level Arrays
 In this sense, we say that a computer’s main memory performs asrandom access memory (RAM). 
That is, it is just as easy to retrieve byte #8675309 as it is to retrieve byte #309. 
(In practice, there are complicating factors including the use of caches and external memory;
we address some of those issues in Chapter 15.) Using the notation for asymptotic analysis, 
we say that any individual byte of memory can be stored or retrieved in O(1) time.

in general, a programming language keeps track of the association between
an identifier and the memory address in which the associated value is stored.

A common programming task is to keep track of a sequence of related objects. 
For example, we may want a video game to keep track of the top ten scores for that game. 
Rather than use ten different variables for this task, we would prefer to use a single name 
for the group and use index numbers to refer to the high scores in that group.

Each cell of an array must use the same number of bytes. This requirement is
what allows an arbitrary cell of the array to be accessed in constant time based on
its index.

## 5.2.1 Referential Arrays
Instead, Python represents a list or tuple instance using an internal storage
mechanism of an array of object references. At the lowest level, what is stored
is a consecutive sequence of memory addresses at which the elements of the se-
quence reside.

Although the relative size of the individual elements may vary, the number of
bits used to store the memory address of each element is fixed (e.g., 64-bits per
address).

因为array保存的是指针（address of obj），所以可以保存任何类型对象。
In Figure 5.4, we characterize a list of strings that are the names of the patients
in a hospital. It is more likely that a medical information system would manage
more comprehensive information on each patient, perhaps represented as an in-
stance of a Patient class. From the perspective of the list implementation, thesame
principle applies: The list will simply keep a sequence of references to those ob-
jects. Note as well that a reference to the None object can be used as an element
of the list to represent an empty bed in the hospital.

列表切片，会产生一个新列表实例，但是引用的仍然是原列表的元素。
The fact that lists and tuples are referential structures is significant to the semantics 
of these classes. A single list instance may include multiple references
to the same object as elements of the list, and it is possible for a single object to
be an element of two or more lists, as those lists simply store references back to
that object. As an example, when you compute a slice of a list, the result is a new
list instance, but that new list has references to the same elements that are in the
original list, as portrayed in Figure 5.5.


## 5.2.2 Compact Arrays in Python
In the introduction to this section, we emphasized that strings are represented using
an array of characters (not an array of references). We will refer to this more direct
representation as acompact array because the array is storing the bits that represent
the primary data (characters, in the case of strings).

Compact arrays have several advantages over referential structures in terms
of computing performance. Most significantly, the overall memory usage will be
much lower for a compact structure because there is no overhead devoted to the
explicit storage of the sequence of memory references (in addition to the primary
data).

Python allows you to query the actual number of bytes being used for the primary storage of any object. 
This is done using the getsizeof function of the sys module. On our system, the size of
a typical int object requires 14 bytes of memory (well beyond the 4 bytes needed
for representing the actual 64-bit number).

Another important advantage to acompact structure for high-performance com-
puting is that the primary data are stored consecutively in memory. Note well that
this is not the case for a referential structure. That is, even though a list maintains
careful ordering of the sequence of memory addresses, wherethose elements reside
in memory is not determined by the list. Because of the workings of the cache and
memory hierarchies of computers, it is often advantageous to have data stored in
memory near other data that might be used in the same computations.

Despite the apparent inefficiencies of referential structures, we will generally
be content with the convenience of Python’s lists and tuples in this book. The only
place in which we consider alternatives will be in Chapter 15, which focuses on
the impact of memory usage on data structures and algorithms. Python provides
several means for creating compact arrays of various types.

Primary support for compact arrays is in a module named array. That module
defines a class, also named array, providing compact storage for arrays of primitive
data types.

As a tangible example, the type code, i , designates an array of (signed) integers,
typically represented using at least 16-bits each. We can declare the array shown in
Figure 5.10 as,
primes = array( i , [2, 3, 5, 7, 11, 13, 17, 19])


# 5.3 Dynamic Arrays and Amortization

In fact, each object in Python maintains some state, for example, a reference to 
denote the class to which it belongs.

Although we cannot directly access private instance variables for a list,
we can speculate that in some form it maintains state information akin to:
--n The number of actual elements currently stored in the list.
--capacity The maximum number of elements that could be stored in the
currently allocated array.
--A The reference to the currently allocated array (initiallyNone).

Because a list is a referential structure, the result of getsizeof for a list instance
only includes the size for representing its primary structure; it does not account for
memory used by the objects that are elements of the list.


## 5.3.1 Implementing a Dynamic Array

Although the Python list class provides a highly optimized implementation of dy-
namic arrays, upon which we rely for the remainder of this book, it is instructive to
see how such a class might be implemented.
The key is to provide means to grow the array A that stores the elements of a
list. Of course, we cannot actually grow that array, as its capacity is fixed. If an
element is appended to a list at a time when the underlying array is full, we perform
the following steps:
1. Allocate a new array B with larger capacity.
2. Set B[i] = A[i], for i = 0,...,n−1, where n denotes current number of items.
3. Set A = B, that is, we henceforth use B as the array supporting the list.
4. Insert the new element in the new array.


The remaining issue to consider is how large of a new array to create. A com-
monly used rule is for the new array to have twice the capacity of the existing array
that has been filled. In Section 5.3.2, we will provide a mathematical analysis to
justify such a choice.

## 5.3.2 Amortized Analysis of Dynamic Arrays

## 5.4.2 Python’s String Class
Pattern Matching
Someofthe most interesting behaviors, from analgorithmicpoint ofview, are those
that in some way depend upon finding a string pattern within a larger string; this
goal is at the heart of methods such as contains , find, index, count, replace,
and split. String algorithms will be the topic of Chapter 13, and this particular
problem known as pattern matching will be the focus of Section 13.2. A naive im-
plementation runs in O(mn) time case, because we consider the n−m+1 possible
starting indices for the pattern, and we spend O(m) time at each starting position,
checking if the pattern matches. However, in Section 13.2, we will develop an al-
gorithm for finding a pattern of length m within a longer string of length n in O(n)
time.

Composing Strings
Finally, we wish to comment on several approaches for composing large strings. As
an academic exercise, assume that we have a large string named document, and our
goal is to produce a new string, letters, that contains only the alphabetic characters
of the original string (e.g., with spaces, numbers, and punctuation removed). It may
be tempting to compose a result through repeated concatenation, as follows.
# WARNING: do not do this
letters = '' # start with empty string
for c in document:
  if c.isalpha():
    letters += c # concatenate alphabetic character


A more standard Python idiom to guarantee linear time composition of a string
is to use a temporary list to store individual pieces, and then to rely on the join
method of the str class to compose the final result. Using this technique with our
previous example would appear as follows:
temp = [] # start with empty list
for c in document:
  if c.isalpha():
    temp.append(c) # append alphabetic character
letters = ''.join(temp) # compose overall result

As we discussed at the end of the previous section, we can further improve
the practical execution time by using a list comprehension syntax to build up the
temporary list, rather than by repeated calls to append. That solution appears as,
letters = ''.join([c for c in document if c.isalpha()])
Better yet, wecan entirely avoid the temporary list withagenerator comprehension:
letters = ''.join(c for c in document if c.isalpha())


## 5.6 Multidimensional Data Sets

To properly initialize a two-dimensional list, we must ensure that each cell of
the primary list refers to an independent instance of a secondary list. This can be
accomplished through the use of Python’s list comprehension syntax.
data = [[0] c for j in range(r)]























