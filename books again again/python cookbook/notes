1. 自动解包

>>> date = (12, 28, 2017)
>>> m, d, y = date

>>> record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212')
>>> name, email, *phone_numbers = record

>>> record = ('ACME', 50, 123.45, (12, 18, 2012))
>>> name, *_, (*_, year) = record

>>> items = [1, 10, 7, 4, 5, 9]
>>> head, *tail = items

然后，由于语言层面的限制，递归并不是 Python 擅长的。

实现一个堆数据结构是很有价值的，值得深入学习。
2. 查找最大或最小的 N 个元素(heapq)
import heapq

当要查找的元素个数相对比较小的时候，函数 nlargest() 和 nsmallest() 是很
合适的。如果你仅仅想查找唯一的最小或最大 (N=1) 的元素的话，那么使用 min() 和
max() 函数会更快些。类似的，如果 N 的大小和集合大小接近的时候，通常先排序这
个集合然后再使用切片操作会更快点 (sorted(items)[:N] 或者是 sorted(items)[-
N:] )。需要在正确场合使用函数 nlargest() 和 nsmallest() 才能发挥它们的优势 (如果
N 快接近集合大小了，那么使用排序操作会更好些)。
尽管你没有必要一定使用这里的方法，但是堆数据结构的实现是一个很有趣并且值
得你深入学习的东西。基本上只要是数据结构和算法书籍里面都会有提及到。 heapq
模块的官方文档里面也详细的介绍了堆数据结构底层的实现细节。

3. priority queue

import heapq
class PriorityQueue:
  def __init__(self):
    self._queue = []
    self._index = 0
  def push(self, item, priority):
    heapq.heappush(self._queue, (-priority, self._index, item))
    self._index += 1
  def pop(self):
    return heapq.heappop(self._queue)[-1]

如果你想在多个线程中使用同一个队列，那么你需要增加适当的锁和信号量机制。
可以查看 12.3 小节的例子演示是怎样做的。
heapq 模块的官方文档有更详细的例子程序以及对于堆理论及其实现的详细说明。

4. 1.6 字典中的键映射多个值
d = {
'a' : [1, 2, 3],
'b' : [4, 5]
}
e = {
'a' : {1, 2, 3},
'b' : {4, 5}
}
选择使用列表还是集合取决于你的实际需求。如果你想保持元素的插入顺序就应该
使用列表，如果想去掉重复元素就使用集合（并且不关心元素的顺序问题）。

from collections import defaultdict
d = defaultdict(list)
d['a'].append(1)
d['a'].append(2)
d['b'].append(4)
d = defaultdict(set)
d['a'].add(1)
d['a'].add(2)
d['b'].add(4)

这一小节所讨论的问题跟数据处理中的记录归类问题有大的关联。

5. 怎样在数据字典中执行一些计算操作 (比如求最小值、最大值、排序等等)
prices = {
  'ACME': 45.23,
  'AAPL': 612.78,
  'IBM': 205.55,
  'HPQ': 37.20,
  'FB': 10.75
}
为了对字典值执行计算操作，通常需要使用 zip() 函数先将键和值反转过来。比
如，下面是查找最小和最大股票价格和股票值的代码：
min_price = min(zip(prices.values(), prices.keys()))
# min_price is (10.75, 'FB')
max_price = max(zip(prices.values(), prices.keys()))
# max_price is (612.78, 'AAPL')

执行这些计算的时候，需要注意的是 zip() 函数创建的是一个只能访问一次的迭
代器。

6. 1.9 查找两字典的相同点（那必须是集合操作。python的集合是基于hashing的）
a = {
  'x' : 1,
  'y' : 2,
  'z' : 3
}
b = {
  'w' : 10,
  'x' : 11,
  'y' : 2
}
为了寻找两个字典的相同点，可以简单的在两字典的 keys() 或者 items() 方法返
回结果上执行集合操作。比如：
# Find keys in common
a.keys() & b.keys() # { 'x', 'y' }
# Find keys in a that are not in b
a.keys() - b.keys() # { 'z' }
# Find (key,value) pairs in common
a.items() & b.items() # { ('y', 2) }

这些操作也可以用于修改或者过滤字典元素。比如，假如你想以现有字典构造一个
排除几个指定键的新字典。下面利用字典推导来实现这样的需求：
# Make a new dictionary with certain keys removed
c = {key:a[key] for key in a.keys() - {'z', 'w'}}
# c is {'x': 1, 'y': 2}

一个字典就是一个键集合与值集合的映射关系。字典的 keys() 方法返回一个展现
键集合的键视图对象。键视图的一个很少被了解的特性就是它们也支持集合操作，比
如集合并、交、差运算。所以，如果你想对集合的键执行一些普通的集合操作，可以
直接使用键视图对象而不用先将它们转换成一个 set。
字典的 items() 方法返回一个包含 (键，值) 对的元素视图对象。这个对象同样也
支持集合操作，并且可以被用来查找两个字典有哪些相同的键值对。

7. 1.10 删除序列相同元素并保持顺序
如果序列上的值都是 hashable 类型，那么可以很简单的利用集合或者生成器来解
决这个问题。比如：
def dedupe(items):
seen = set()
for item in items:
  if item not in seen:
    yield item
    seen.add(item) # seen只起到辅助检测的作用
    
这个方法仅仅在序列中元素为 hashable 的时候才管用。如果你想消除元素不可哈
希 (比如 dict 类型) 的序列中重复元素的话，你需要将上述代码稍微改变一下。

8. 1.11 命名切片
SHARES = slice(20, 23)
PRICE = slice(31, 37)
cost = int(record[SHARES]) * float(record[PRICE])
第二种版本中，你避免了大量无法理解的硬编码下标，使得你的代码更加清晰可读
了。

一般来讲，代码中如果出现大量的硬编码下标值会使得可读性和可维护性大大降
低。比如，如果你回过来看看一年前你写的代码，你会摸着脑袋想那时候自己到底想
干嘛啊。这里的解决方案是一个很简单的方法让你更加清晰的表达代码到底要做什么。

如果你有一个切片对象 a，你可以分别调用它的 a.start , a.stop , a.step 属性来
获取更多的信息。比如：
>>> a = slice(5, 50, 2)
>>> a.start
5
>>> a.stop
50
>>> a.step
2

9. 1.12 序列中出现次数最多的元素
collections.Counter 类就是专门为这类问题而设计的，它甚至有一个有用的
most_common() 方法直接给了你答案。

words = [
'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes',
'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the',
'eyes', "don't", 'look', 'around', 'the', 'eyes', 'look', 'into',
'my', 'eyes', "you're", 'under'
]
from collections import Counter
word_counts = Counter(words)
# 出现频率最高的 3 个单词
top_three = word_counts.most_common(3)
print(top_three)
# Outputs [('eyes', 8), ('the', 5), ('look', 4)]

作为输入， Counter 对象可以接受任意的 hashable 序列对象。在底层实现上，一
个 Counter 对象就是一个字典，将元素映射到它出现的次数上。

Counter 实例一个鲜为人知的特性是它们可以很容易的跟数学运算操作相结合。

毫无疑问， Counter 对象在几乎所有需要制表或者计数数据的场合是非常有用的
工具。在解决这类问题的时候你应该优先选择它，而不是手动的利用字典去实现。

10. 1.13 通过某个关键字排序一个字典列表
通过使用 operator 模块的 itemgetter 函数，可以非常容易的排序这样的数据结
构。假设你从数据库中检索出来网站会员信息列表，并且以下列的数据结构返回：
rows = [
{'fname': 'Brian', 'lname': 'Jones', 'uid': 1003},
{'fname': 'David', 'lname': 'Beazley', 'uid': 1002},
{'fname': 'John', 'lname': 'Cleese', 'uid': 1001},
{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}
]
根据任意的字典字段来排序输入结果行是很容易实现的，代码示例：
from operator import itemgetter
rows_by_fname = sorted(rows, key=itemgetter('fname'))
rows_by_uid = sorted(rows, key=itemgetter('uid'))
print(rows_by_fname)
print(rows_by_uid)

itemgetter() 函数也支持多个 keys，比如下面的代码
rows_by_lfname = sorted(rows, key=itemgetter('lname','fname'))
print(rows_by_lfname)

itemgetter() 有时候也可以用 lambda 表达式代替，比如：
rows_by_fname = sorted(rows, key=lambda r: r['fname'])
rows_by_lfname = sorted(rows, key=lambda r: (r['lname'],r['fname']))
这种方案也不错。但是，使用 itemgetter() 方式会运行的稍微快点。因此，如果
你对性能要求比较高的话就使用 itemgetter() 方式。
最后，不要忘了这节中展示的技术也同样适用于 min() 和 max() 等函数。比如：
>>> min(rows, key=itemgetter('uid'))
{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}
>>> max(rows, key=itemgetter('uid'))
{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}

11. 1.14 排序不支持原生比较的对象
内置的 sorted() 函数有一个关键字参数 key ，可以传入一个 callable 对象给它，
这个 callable 对象对每个传入的对象返回一个值，这个值会被 sorted 用来排序这些
对象。比如，如果你在应用程序里面有一个 User 实例序列，并且你希望通过他们的
user id 属性进行排序，你可以提供一个以 User 实例作为输入并输出对应 user id 值
的 callable 对象。

sorted(users, key=lambda u: u.user_id)

12. 你有一个字典或者实例的序列，然后你想根据某个特定的字段比如 date 来分组迭
代访问。

itertools.groupby() 函数对于这样的数据分组操作非常实用。为了演示，假设你
已经有了下列的字典列表：
rows = [
{'address': '5412 N CLARK', 'date': '07/01/2012'},
{'address': '5148 N CLARK', 'date': '07/04/2012'},
{'address': '5800 E 58TH', 'date': '07/02/2012'},
{'address': '2122 N CLARK', 'date': '07/03/2012'},
{'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'},
{'address': '1060 W ADDISON', 'date': '07/02/2012'},
{'address': '4801 N BROADWAY', 'date': '07/01/2012'},
{'address': '1039 W GRANVILLE', 'date': '07/04/2012'}
]

现在假设你想在按 date 分组后的数据块上进行迭代。为了这样做，你首先需要按
照指定的字段 (这里就是 date ) 排序，然后调用 itertools.groupby() 函数：
from operator import itemgetter
from itertools import groupby
# Sort by the desired field first
rows.sort(key=itemgetter('date'))
# Iterate in groups
for date, items in groupby(rows, key=itemgetter('date')):
  print(date)
  for i in items:
    print(' ', i)

groupby() 函数扫描整个序列并且查找连续相同值 (或者根据指定 key 函数返回值
相同) 的元素序列。在每次迭代的时候，它会返回一个值和一个迭代器对象，这个迭代
器对象可以生成元素值全部等于上面那个值的组中所有对象。
一个非常重要的准备步骤是要根据指定的字段将数据排序。因为 groupby() 仅仅
检查连续的元素，如果事先并没有排序完成的话，分组函数将得不到想要的结果。

13. 1.16 过滤序列元素
*列表推导式
*生成器
>>> pos = (n for n in mylist if n > 0)
>>> pos
<generator object <genexpr> at 0x1006a0eb0>

*filter()
有时候，过滤规则比较复杂，不能简单的在列表推导或者生成器表达式中表达出
来。比如，假设过滤的时候需要处理一些异常或者其他复杂情况。这时候你可以将过
滤代码放到一个函数中，然后使用内建的 filter() 函数。

filter() 函数创建了一个迭代器，因此如果你想得到一个列表的话，就得像示例
那样使用 list() 去转换。

!!!
列表推导和生成器表达式通常情况下是过滤数据最简单的方式。其实它们还能在过
滤的时候转换数据。
>>> mylist = [1, 4, -5, 10, -7, 2, 3, -1]
>>> import math
>>> [math.sqrt(n) for n in mylist if n > 0]

更一般的模式是：（下面的每个过程以list作为统一接口/界面）
enumerate——>filter——>map——>accumulate

过滤操作的一个变种就是将不符合条件的值用新的值代替，而不是丢弃它们。比
如，在一列数据中你可能不仅想找到正数，而且还想将不是正数的数替换成指定的数。
通过将过滤条件放到条件表达式中去，可以很容易的解决这个问题，就像这样：
>>> clip_neg = [n if n > 0 else 0 for n in mylist]
>>> clip_neg
[1, 4, 0, 10, 0, 2, 3, 0]

另外一个值得关注的过滤工具就是 itertools.compress() ，它以一个 iterable
对象和一个相对应的 Boolean 选择器序列作为输入参数。然后输出 iterable 对象中
对应选择器为 True 的元素。当你需要用另外一个相关联的序列来过滤某个序列的时
候，这个函数是非常有用的。比如，假如现在你有下面两列数据：
addresses = [
'5412 N CLARK',
'5148 N CLARK',
'5800 E 58TH',
'2122 N CLARK'
'5645 N RAVENSWOOD',
'1060 W ADDISON',
'4801 N BROADWAY',
'1039 W GRANVILLE'
]
counts = [ 0, 3, 10, 4, 1, 7, 6, 1]
现在你想将那些对应 count 值大于 5 的地址全部输出，那么你可以这样做：
>>> from itertools import compress
>>> more5 = [n > 5 for n in counts]
>>> more5
[False, False, True, False, False, True, True, False]
>>> list(compress(addresses, more5))
['5800 E 58TH', '4801 N BROADWAY', '1039 W GRANVILLE']

这里的关键点在于先创建一个 Boolean 序列，指示哪些元素符合条件。然后
compress() 函数根据这个序列去选择输出对应位置为 True 的元素。
和 filter() 函数类似， compress() 也是返回的一个迭代器。因此，如果你需要
得到一个列表，那么你需要使用 list() 来将结果转换为列表类型。


14. 1.17 从字典中提取子集
最简单的方式是使用字典推导。比如：
prices = {
'ACME': 45.23,
'AAPL': 612.78,
'IBM': 205.55,
'HPQ': 37.20,
'FB': 10.75
}
# Make a dictionary of all prices over 200
p1 = {key: value for key, value in prices.items() if value > 200}
# Make a dictionary of tech stocks
tech_names = {'AAPL', 'IBM', 'HPQ', 'MSFT'}
p2 = {key: value for key, value in prices.items() if key in tech_names}

15. 1.20 合并多个字典或映射
假如你有如下两个字典:
a = {'x': 1, 'z': 3 }
b = {'y': 2, 'z': 4 }
现在假设你必须在两个字典中执行查找操作 (比如先从 a 中找，如果找不到再在 b
中找)。一个非常简单扼解决方案就是使用 collections 模块中的 ChainMap 类。比如：
from collections import ChainMap
c = ChainMap(a,b)
print(c['x']) # Outputs 1 (from a)
print(c['y']) # Outputs 2 (from b)
print(c['z']) # Outputs 3 (from a)

一个 ChainMap 接受多个字典并将它们在逻辑上变为一个字典。然后，这些字典并
不是真的合并在一起了， ChainMap 类只是在内部创建了一个容纳这些字典的列表并重
新定义了一些常见的字典操作来遍历这个列表。

如果出现重复键，那么第一次出现的映射值会被返回。因此，例子程序中的 c['z']
总是会返回字典 a 中对应的值，而不是 b 中对应的值。

ChainMap 对于编程语言中的作用范围变量 (比如 globals , locals 等) 是非常有用
的。事实上，有一些方法可以使它变得简单：
>>> values = ChainMap()
>>> values['x'] = 1
>>> # Add a new mapping
>>> values = values.new_child()
>>> values['x'] = 2
>>> # Add a new mapping
>>> values = values.new_child()
>>> values['x'] = 3
>>> values
ChainMap({'x': 3}, {'x': 2}, {'x': 1})
>>> values['x']
3
>>> # Discard last mapping
>>> values = values.parents
>>> values['x']
2
>>> # Discard last mapping
>>> values = values.parents
>>> values['x']
1
>>> values
ChainMap({'x': 1})



























