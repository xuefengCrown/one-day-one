
几乎所有有用的程序都会涉及到某些文本处理，不管是解析数据还是产生输出。这
一章将重点关注文本的操作处理，比如提取字符串，搜索，替换以及解析等。大部分
的问题都能简单的调用字符串的内建方法完成。但是，一些更为复杂的操作可能需要
正则表达式或者强大的解析器，所有这些主题我们都会详细讲解。并且在操作 Unicode
时候碰到的一些棘手的问题在这里也会被提及到。

2.1 使用多个界定符分割字符串
2.3 用 Shell 通配符匹配字符串
2.4 字符串匹配和搜索

2.1 使用多个界定符分割字符串
当你需要更加灵活的切割字符串的时候，
最好使用 re.split() 方法：
>>> line = 'asdf fjdk; afed, fjek,asdf, foo'
>>> import re
>>> re.split(r'[;,\s]\s*', line)
['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']

匹配开头或末尾（startswith endswith）
[name for name in filenames if name.endswith(('.c', '.h')) ]

最后提一下，当和其他操作比如普通数据聚合相结合的时候 startswith() 和
endswith() 方法是很不错的。比如，下面这个语句检查某个文件夹中是否存在指定的
文件类型：
if any(name.endswith(('.c', '.h')) for name in listdir(dirname)):


2.3 用 Shell 通配符匹配字符串
你想使用 Unix Shell 中常用的通配符 (比如 *.py , Dat[0-9]*.csv 等) 去匹配文
本字符串。
fnmatch 模块提供了两个函数—— fnmatch() 和 fnmatchcase() ，可以用来实现
这样的匹配。
>>> from fnmatch import fnmatch, fnmatchcase
>>> fnmatch('foo.txt', '*.txt')
True
>>> fnmatch('foo.txt', '?oo.txt')
True
>>> fnmatch('Dat45.csv', 'Dat[0-9]*')
True
>>> names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py']
>>> [name for name in names if fnmatch(name, 'Dat*.csv')]
['Dat1.csv', 'Dat2.csv']

如果你的代码需要做文件名的匹配，最好使用 glob 模块。


2.4 字符串匹配和搜索
如果你想使用同一个模式去做多次匹配，你应该先将模式字符串预编译为模式对象。比如：
>>> datepat = re.compile(r'\d+/\d+/\d+')
>>> if datepat.match(text1):

match() 总是从字符串开始去匹配，如果你想查找字符串任意部分的模式出现位
置，使用 findall() 方法去代替。比如：
>>> text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
>>> datepat.findall(text)
['11/27/2012', '3/13/2013']

在定义正则式的时候，通常会利用括号去捕获分组。比如：
>>> datepat = re.compile(r'(\d+)/(\d+)/(\d+)')
>>>

>>> # Find all matches (notice splitting into tuples)
>>> text
'Today is 11/27/2012. PyCon starts 3/13/2013.'
>>> datepat.findall(text)
[('11', '27', '2012'), ('3', '13', '2013')]
>>> for month, day, year in datepat.findall(text):
... print('{}-{}-{}'.format(year, month, day))

findall() 方法会搜索文本并以列表形式返回所有的匹配。如果你想以迭代方式返
回匹配，可以使用 finditer() 方法来代替，比如：
>>> for m in datepat.finditer(text):
... print(m.groups())

2.5 字符串搜索和替换
对于复杂的模式，请使用 re 模块中的 sub() 函数。为了说明这个，假设你想将形
式为 11/27/2012 的日期字符串改成 2012-11-27 。示例如下：
>>> text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
>>> import re
>>> re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text)
'Today is 2012-11-27. PyCon starts 2013-3-13.'
>>>
sub() 函数中的第一个参数是被匹配的模式，第二个参数是替换模式。反斜杠数字
比如 \3 指向前面模式的捕获组号。

如果你打算用相同的模式做多次替换，考虑先编译它来提升性能。比如：
>>> import re
>>> datepat = re.compile(r'(\d+)/(\d+)/(\d+)')
>>> datepat.sub(r'\3-\1-\2', text)
'Today is 2012-11-27. PyCon starts 2013-3-13.'
>>>

对于更加复杂的替换，可以传递一个替换回调函数来代替，比如：
>>> from calendar import month_abbr
>>> def change_date(m):
... mon_name = month_abbr[int(m.group(1))]
... return '{} {} {}'.format(m.group(2), mon_name, m.group(3))
...
>>> datepat.sub(change_date, text)
'Today is 27 Nov 2012. PyCon starts 13 Mar 2013.'
>>>

一个替换回调函数的参数是一个 match 对象，也就是 match() 或者 find() 返回的
对象。使用 group() 方法来提取特定的匹配部分。回调函数最后返回替换字符串。

关于正则表达式搜索和替换，上面演示的 sub() 方法基本已经涵盖了所有。其实
最难的部分就是编写正则表达式模式，这个最好是留给作者自己去练习了。

2.6 字符串忽略大小写的搜索替换
为了在文本操作时忽略大小写，你需要在使用 re 模块的时候给这些操作提供
re.IGNORECASE 标志参数。比如：
>>> text = 'UPPER PYTHON, lower python, Mixed Python'
>>> re.findall('python', text, flags=re.IGNORECASE)
['PYTHON', 'python', 'Python']
>>> re.sub('python', 'snake', text, flags=re.IGNORECASE)
'UPPER snake, lower snake, Mixed snake'
>>>

对于一般的忽略大小写的匹配操作，简单的传递一个 re.IGNORECASE 标志参数就
已经足够了。但是需要注意的是，这个对于某些需要大小写转换的 Unicode 匹配可能
还不够，参考 2.10 小节了解更多细节。


2.7 最短匹配模式

你正在试着用正则表达式匹配某个文本模式，但是它找到的是模式的最长可能匹
配。而你想修改它变成查找最短的可能匹配。

这个问题一般出现在需要匹配一对分隔符之间的文本的时候 (比如引号包含的字符
串)。为了说明清楚，考虑如下的例子：
>>> str_pat = re.compile(r'\"(.*)\"')
>>> text1 = 'Computer says "no."'
>>> str_pat.findall(text1)
['no.']
>>> text2 = 'Computer says "no." Phone says "yes."'
>>> str_pat.findall(text2)
['no." Phone says "yes.']
>>>
在这个例子中，模式 r'\"(.*)\"' 的意图是匹配被双引号包含的文本。但是在正
则表达式中 * 操作符是贪婪的，因此匹配操作会查找最长的可能匹配。于是在第二个
例子中搜索 text2 的时候返回结果并不是我们想要的。
为了修正这个问题，可以在模式中的 * 操作符后面加上? 修饰符，就像这样：
>>> str_pat = re.compile(r'\"(.*?)\"')
>>> str_pat.findall(text2)
['no.', 'yes.']
>>>
这样就使得匹配变成非贪婪模式，从而得到最短的匹配，也就是我们想要的结果。

















